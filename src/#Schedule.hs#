{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards   #-}

module Schedule where

import           Control.Monad         (mzero)
import qualified Data.ByteString.Char8 as C8
import qualified Data.ByteString.Lazy  as BL
import           Data.Csv
import qualified Data.HashMap.Lazy     as M
import           Data.List             (foldl', groupBy, last, nub, nubBy, sort,
                                        sortBy, tails, (\\))
import           Data.Text             (Text)
import qualified Data.Text             as T
import           Data.Time
import           Data.Time.Calendar    (DayOfWeek (Saturday))
import           Data.Time.Format
import qualified Data.Vector           as V
--import           Lib
import           Control.Applicative
import           Data.Maybe
import           Data.Monoid
import qualified Data.Set              as S
import           Safe

data Schedule = Schedule {
  events :: [Event] } deriving (Show, Eq)

data Task = Task {
  name  :: !Text,
  days  :: [DayOfWeek],
  pool  :: [Text],
  count :: Int,
  proxy :: Maybe Text } deriving (Read, Show, Eq)

data Event = Event {
  date     :: !Day,
  rotation :: !Text,
  person   :: Maybe Text } deriving (Show, Eq, Ord)

data Period = Period {
  start :: Day,
  end   :: Day} deriving (Read, Show, Eq, Ord)

data Tally = Tally {
  tRotation :: Text,
  tPerson   :: Text,
  tDays     :: [DayOfWeek],
  tCount    :: Int } deriving (Eq, Show)

data ValidationError = TaskSurplus (Day, Task)
                     | TaskDeficit (Day, Task)
                     | AssignmentPool Event
                     | AssignmentCount [Event]
                     | PersonAssignmentSurplus (Day,Text)
                     | PersonAssignmentDeficit (Day,Text)
                     | GenericError Text
  deriving (Eq)

longDayString :: Day -> String
longDayString dt = (show . dayOfWeek $ dt) <> " " <> formatTime defaultTimeLocale "%b %e" dt

instance Show ValidationError where
  show (TaskSurplus (dt, tsk)) = (T.unpack $ name tsk) <> " should not be scheduled on " <> longDayString dt
  show (TaskDeficit (dt, tsk)) = (T.unpack $ name tsk) <> " should be scheduled on " <> longDayString dt
  show (AssignmentPool ev) = (T.unpack . fromJust . person $ ev)
                             <> " not in staff pool, cannot do "
                             <> (T.unpack $ rotation ev)
                             <> " on "
                             <> longDayString (date ev)
  show (AssignmentCount ev) = "Cannot assign " <> (show $ length ev) <> " people ["
                              <> T.unpack (T.intercalate ", " (catMaybes (map person ev)))
                              <> "] to " <> (T.unpack . rotation $ head ev)
                              <> " on " <> (show . date $ head ev)
  show (PersonAssignmentDeficit (dt,prs)) = (T.unpack prs) <> " is unassigned on " <> longDayString dt
  show (PersonAssignmentSurplus  (dt,prs)) = (T.unpack prs) <> " has more than one assignment on " <> longDayString dt
  show (GenericError txt) = T.unpack txt



{-
instance FromRecord Event where
  parseRecord v
    | V.length v == 11 = Event <$> v .! 0 <*> v .! 2 <*> v .! 9
    | otherwise = mzero


instance FromField UTCTime where
  parseField t = pure $ parseTimeOrError True defaultTimeLocale "%-m/%-d/%Y" (C8.unpack t)

scheduleFromByteString :: BL.ByteString -> Either String Schedule
scheduleFromByteString bs =
  let es = decode HasHeader bs :: Either String (V.Vector Event) in
    Schedule <$> es
-}
csvFromQgendaGrid :: BL.ByteString -> Either String (V.Vector [T.Text])
csvFromQgendaGrid bs = decode NoHeader bs

removeEmptyText = filter (\x -> (x /= ""))

csvToEvents :: V.Vector [T.Text] -> [Event]
csvToEvents csv = cleanNames $ filter (\ev -> (person ev) `notElem` [Just "", Just "CLOSED"]) evs
  where
    cleanCsv = V.drop 3 csv -- remove the header lines
    entries = V.toList $ V.drop 3 cleanCsv
    myRow = removeEmptyText $ cleanCsv V.! 0
    dayRow = removeEmptyText $ cleanCsv V.! 1
    dtStr = T.unpack $ T.take 3 (head myRow) <> head dayRow <> (T.drop 4 $ head myRow)
    startDt = parseTimeOrError True defaultTimeLocale "%b%e%y" dtStr :: Day
    updateEntry acc [] = acc
    updateEntry acc@(f:fs) e = if (head e) == ""
                             then
                               let newRow = (head f ) : (drop 1 e) in
                                 newRow : acc
                             else e : acc
    updatedEntries = foldl' updateEntry [(head entries)] (drop 1 entries)
    evs = concatMap (\e -> zipWith3 Event [startDt ..] (repeat $ head e) (map Just (drop 1 e))) updatedEntries
    prettyName nm = if T.isInfixOf "-" nm then (T.strip . T.take 3 $ nm) else T.strip nm
    cleanNames = map (\e@Event{..} -> e { person = prettyName <$> person})

{-
makeTaskDef :: [Event] -> [(Text, [DayOfWeek], [Text])]
makeTaskDef = collect . partition
  where
    partition = groupBy (\a b -> (rotation a == rotation b))
    collect = map (\gp -> ((rotation . head $ gp),
                           (nub (map (dayOfWeek . date) gp)),
                           sort (nub (map person gp))))
-}


subSchedule :: Schedule -> [Day] -> [Text] -> Schedule
subSchedule sched ds tns = sched {events = newEvs}
  where
    newEvs = filter (\ev -> ((date ev) `elem` ds) && ((rotation ev) `elem` tns)) (events sched)

makeTaskDef' :: [Event] -> [Task] --[(Text, [DayOfWeek], [Text])]
makeTaskDef' = collect . partition
  where
    partition = groupBy (\a b -> (rotation a == rotation b))
    collect = map (\gp -> Task ((rotation . head $ gp))
                          (nub (map (dayOfWeek . date) gp))
                          (sort . nub . catMaybes $ map person gp)
                  1 Nothing)

taskToEvents :: Task -> [Day] -> [Event]
taskToEvents tsk dst = map (\d -> Event d (name tsk) Nothing) ds
  where
    ds = filter (\d -> (dayOfWeek d) `elem` (days tsk))  dst --[(start p) .. (end p)]


validateSchedule :: Schedule -> [Day] -> [Task] -> [Text] -> [ValidationError]
validateSchedule sched ds ts ps = concatMap (validateTask sched ds) ts <>
                                  concatMap (validateAssignments sched ds) ts <>
                                  concatMap (validateAssignmentCount sched ds) ts <>
                                  concatMap (validatePerson sched ds) ps

validateTask :: Schedule -> [Day] -> Task -> [ValidationError]
validateTask sched ds tsk =  notPresent ++ extra
  where
    notPresent = map (\x -> (TaskDeficit (x, tsk))) (S.toList (S.difference tgtDts actualDts))
    extra = map (\x -> (TaskSurplus (x, tsk))) (S.toList (S.difference actualDts'  tgtDts))

    tgtTsk = case (proxy tsk) of
      Just pr -> [(name tsk), pr]
      Nothing -> [(name tsk)]
    evs = events $ subSchedule sched ds [(name tsk)]
    evsWProxy = events $ subSchedule sched ds tgtTsk
    tgtDts = S.fromList $ map (\e -> date e) $ taskToEvents tsk ds
    actualDts = S.fromList $ map (\e -> date e) $ evsWProxy
    actualDts' = S.fromList $ map (\e -> date e) $ evs

validateAssignments :: Schedule -> [Day] -> Task -> [ValidationError]
validateAssignments sched ds tsk = map (\x -> (AssignmentPool x)) $ filter validAssign evs
  where
    evs = events $ subSchedule sched ds [(name tsk)]
    validAssign e = case (person e) of
      Just p  -> p `notElem` (pool tsk)
      Nothing -> True

validateAssignmentCount :: Schedule -> [Day] -> Task -> [ValidationError]
validateAssignmentCount sched ds tsk = map (\x -> (AssignmentCount x)) $ filter invalidCount $ groupByDate . sortByDate $  evs
  where
    evs = events $ subSchedule sched ds [(name tsk)]
    sortByDate = sortBy (\x y -> compare (date x)  (date y))
    groupByDate = groupBy (\x y -> (date x) == (date y))
    invalidCount = (\gp -> (length gp) > (count tsk))

excludeWeekends = filter (\d -> dayOfWeek d `notElem` [Saturday, Sunday])

validatePerson :: Schedule -> [Day] -> Text -> [ValidationError]
validatePerson sched ds prs = deficit ++ surplus
  where
    notWeekend ev = (dayOfWeek . date $ ev) `notElem` [Saturday, Sunday]
    schedDts = sort . map (\ev -> (date ev)) . filter (\ev -> fromJust (person ev) == prs && notWeekend ev) $ events sched
    deficit = map (\x -> (PersonAssignmentDeficit (x, prs))) $ ((excludeWeekends ds) \\ schedDts)
    grpedDts = groupBy (\x y -> x == y) schedDts
    surplus = map (\gp -> (PersonAssignmentSurplus (head gp, prs))) $ filter (\gp -> length gp > 1) grpedDts


-- Check functions - used after first building the schedule
checkVacation :: Schedule -> [Day] -> [Event] -> [Event]
checkVacation sched ds vacEvs = original \\ actual --(original \\ actual) -- ++ (actual \\ original)
  where
    actual = sort . events $ (subSchedule sched ds ["Vac"])
    original = vacEvs

--Checks weekend dispersion setting tol (Integer) to 7 check if back to back weekends
--checkWeekends :: Schedule -> [Day] -> [Text] -> Integer -> [Text]
checkWeekends sched ds rs tol = map (GenericError . format ) .  targets . map limitDisp . map zipped $ dispersion sched Saturday ds rs
  where
    zipped (nm,ds,rs,disp) = (nm, zip (tail ds) disp)
    limitDisp (nm, xs) = (nm, (filter (\(d,dsp) -> dsp <= tol) xs))
    targets = filter (\(_,xs) -> not . null $ xs)
    format (nm, ds) = nm <> " works consecutive weekends on " <> (T.intercalate ", " (map (T.pack . show . fst) ds))


tally :: Schedule -> [DayOfWeek] -> [Day] -> [Text] -> [Tally]
tally sched dows ds tsknms = mkTally . mkGroup . subs $ (events $ subSchedule sched ds tsknms)
  where
    subs = filter (\ev -> (dayOfWeek $ date ev) `elem` dows)
    mkGroup = groupBy (\a b -> (person a) == (person b)) . sortBy (\a b -> compare (person a) (person b))
    mkTally = map (\gp -> Tally (T.pack . show $ tsknms) (fromJust . person . head $ gp) dows (length gp))

-- calculate dispersion of a rotation for all people on givn day of week
dispersion :: Schedule -> DayOfWeek -> [Day] -> [Text] -> [(Text, [Day], Text, [Integer])]
dispersion sched dow ds tasknms = disper . mkGroup $ evs
  where
    evs = filter (\ev -> (dayOfWeek . date $ ev) == dow) . events $ subSchedule sched ds tasknms
    mkGroup = map sort . groupBy (\a b -> (person a) == (person b)) . sortBy (\a b -> compare (person a) (person b))
    disper = map (\evs -> ((fromJust . person . head $ evs), (map date evs), (T.intercalate "," (map rotation evs)), catMaybes $  map calcDiff ( tails (map date  evs))))
    calcDiff []      = Nothing
    calcDiff (a:b:_) = Just $ diffDays b a
    calcDiff (a:[])  = Nothing

run = do
  qFile <- BL.readFile "/Users/toddroth/Desktop/qgenda2020-07-01thru2020-12-30.csv"
  let csvData = csvFromQgendaGrid qFile
  case csvData of
    Left s  -> return []
    Right v -> return $ csvToEvents v


validateIO = do
  --qFile <- BL.readFile "/Users/toddroth/Desktop/qgenda2020-07-01thru2020-12-30.csv"
  qFile <- BL.readFile "/Users/toddroth/Desktop/currentschedule.csv"
  vacFile <- BL.readFile "/Users/toddroth/Desktop/2020-2vacation.csv"
  let csvData = csvFromQgendaGrid qFile
  let tgtTaskNms = rotationList
  let start = fromGregorian 2020 6 29
  let end = fromGregorian 2020 12 19
  --let ds = [start .. end]
  --let period = Period start end
  let exclude = [(fromGregorian 2020 7 3), (fromGregorian 2020 9 7), (fromGregorian 2020 11 26), (fromGregorian 2020 11 27)]
  --let ds = filter (\x -> x `notElem` exclude && ((dayOfWeek x) `notElem` [Saturday, Sunday])) [start .. end]
  let ds = filter (\x -> x `notElem` exclude) [start .. end]
  --let ds = filter (\x -> dayOfWeek x `notElem` [Saturday,Sunday]) [start .. end]
  case csvData of
    Left s -> print "Error"
    Right v -> do
      putStrLn "Validating Schedule structure:\n"
      let sched = subSchedule (Schedule (csvToEvents v)) ds tgtTaskNms
      let tgtTasks = filter (\tsk -> (name tsk) `elem` tgtTaskNms) tasks
      mapM_ print $ concatMap (validateTask sched ds) tgtTasks -- tasks
      putStrLn "\nValidating Assignments:\n"
      mapM_ print $ concatMap (validateAssignments sched ds) tasks
        <> concatMap (validateAssignmentCount sched ds) tasks
        <> concatMap (validatePerson sched ds) peopleList
      putStrLn "\nChecking weekend assignment dispersion:\n"
      mapM_ print $ checkWeekends sched ds  weekendList 7 --(map T.pack weekendList) 7
      {-putStrLn "Checking Vacation assignments:\n"
      --vaccsv <- BL.readFile vacFile
      case (parseVacationCsv' vacFile) of
        Right evs -> mapM_ print $ (checkVacation sched ds evs)
        Left e    -> print (show e)-}
      --mapM_ print $ validateSchedule (subSchedule (Schedule (csvToEvents v)) ds tgtTaskNms) ds (filter (\tsk -> (name tsk) `elem` tgtTaskNms ) tasks) peopleList


rotations :: Schedule -> [Text]
rotations sched =
  let sls = (events sched) in
    sort . nub $ map rotation sls

people :: Schedule -> [Text]
people sched =
  let sls = (events sched) in
  sort . nub . catMaybes $ map person sls

dates :: Schedule -> [Day]
dates sched =
  let sls = (events sched) in
  sort . nub $ map date sls

startDate :: Schedule -> Maybe Day --UTCTime
startDate sched = headMay (dates sched)

endDate :: Schedule -> Maybe Day --UTCTime
endDate sched = lastMay (dates sched)

--importVacationCsv :: String -> IO String
importVacationCsv fp = do
  csvF <- BL.readFile fp --"/Users/toddroth/Desktop/2020-2VACATION.csv"
  case (parseVacationCsv' csvF) of
    Right v ->  mapM_ print $ sort v
    Left e  -> putStrLn (show e) -- "error"

parseVacationCsv :: BL.ByteString -> Either String [Event]
parseVacationCsv bs = fmap (removeEmpty . concat . V.toList . V.map (\vl -> mkEvents (concat $ cycle [take 5 [mkDate (head vl) ..]]) (repeat "Vac") (concat . replicate (length (tail vl)) $ tail vl))) $ rows
  where
    rows = decode NoHeader bs
    mkEvents ds rs ps = zipWith3 (\d r p -> Event d r (Just $ T.pack p)) ds rs ps
    mkDate dtStr = parseTimeOrError True defaultTimeLocale "%Y-%m-%d" dtStr :: Day
    removeEmpty = filter (\ev -> (person ev) /= Just "")


parseVacationCsv' :: BL.ByteString -> Either String [Event]
parseVacationCsv' bs = fmap (removeEmpty . concat . V.toList . V.map (\vl -> rowToEvents vl)) $ rows
  where
    rows = decode NoHeader bs
    rowToEvents r = concatMap (\d -> map (\p -> Event d "Vac" (Just $ T.pack p)) (tail r))
                    (take 5 [(mkDate (head r)) ..])
    mkDate dtStr = parseTimeOrError True defaultTimeLocale "%Y-%m-%d" dtStr :: Day
    removeEmpty = filter (\ev -> (person ev) /= Just "")


{-
rotationCounts :: Schedule -> M.HashMap (Text,Text) Integer
rotationCounts sched = countMap
  where
    countMap = foldl updateMap M.empty tps
    updateMap mp k = if (not $ M.member k mp)
      then M.insert k 1 mp
      else M.adjust (+ 1) k mp
    sList = V.toList (entries sched)
    tps = map (\e -> (rotation e, person e)) sList

dailySchedule :: Schedule -> M.HashMap UTCTime [(Text, Text)]
dailySchedule sched = sMap
  where
    sMap = foldl updateMap M.empty (V.toList (entries sched))
    updateMap mp (Entry d r p) = M.insertWith (++) d [(r,p)] mp

printDailySchedule ::  Schedule -> IO ()
printDailySchedule sched = mapM_ printDay ds
  where
    printDay t = do
      print $ fst t
      mapM_ (\e -> putStrLn ("\t" ++ T.unpack (fst e) ++ "   " ++ T.unpack (snd e))) (sort $ snd t)
    ds = M.toList (dailySchedule sched)
-}
scheduleFile = "/Users/toddroth/Downloads/schedule.txt"


{-
  [RuleSet] -> Schedule -> Analyzer
  for every day in Schedule apply ruleset to day

type RuleSet = [Rule]

data DateType = AnyDay | DaysOfWeek [Integer] | OnDate Date | Step Integer

  data Rule = Rule {
  person :: Maybe String,
  rotation :: Maybe String,
  date :: DateType
  --assertion :: Bool

-}
weekendList = ["Wknd Gen1", "Wknd Gen2", "Peds Wknd", "MSK Wknd", "Body Wknd", "Neuro Wknd", "Vas Wknd"]

rotationList = ["BKU","BODY-CED","BODY-KNI","BODY-WFO","BODY-WMR","BREAST-BRO","BREAST-BRO/RRC","BREAST-WMC/BRO","BREAST-WMC/RRC","BREAST-WMN",
 "Body Wknd","DOff","FLEX","GEN-FLUORO-WMR","GEN-WMApex","GEN-WMC","HAW","MAMMLT/GEN-BRO",
 "MAMMLT/GEN-CED","MAMMLT/GEN-KNI","MAMMLT/GEN-RMP","MAMMLT/GEN-WF","MAMMLT/GEN-WMN",
 "MSK Wknd","MSK-BRI","MSK-KNI","MSK-MRI-CLA","MSK-RMP","MSK-RRC","MSK-WMN",
 "NEURO-BRO-EVE","NEURO-CLAY","NEURO-FV","NEURO-KNI","NEURO-WMR","Neuro Wknd","PCO",
 "PEDS-RRC/WMList","PEDS-WMR","Peds Wknd",
 "VIR-VEIN","VIR-WMC","VIR1-WMR","VIR2-WMR","Vac","Vas Wknd",
 "WMR Eve1","WMR Eve2","WMR Late","Wknd Gen1","Wknd Gen2", "Admin", "PCO2", "BDO", "RSNA", "HOff"]

-- Excludes nighthawks
peopleList = ["ADM","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","EDW","HAR","HIN","HOL","JBM","JGA","JKT","JLB","KDP","KEE","KHA","KLA","LKB","LLA","LOT","MCP","MOR","PEN","RED","SHA","SHK","SM","SOP","SSL","TAN","TJR","WAT"] --,"ALT","RBC","NAZ"]


tasks = [Task {name = "TO", days = [Friday,Wednesday,Tuesday,Thursday,Monday], pool = ["ADM","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","EDW","HAR","HIN","HOL","JBM","JGA","JKT","JLB","KDP","KEE","KHA","KLA","LKB","LLA","LOT","MCP","MOR","PEN","RED","SHA","SHK","SM","SOP","SSL","TAN","TJR","WAT"], count = 1, proxy =Nothing},
         Task {name = "Non Neuro", days = [Saturday], pool = ["ADM","BOR","BRD","BWN","CML","CRO","DAL","DGD","DOS","HAR","HIN","JKT","JLB","KDP","KEE","LOT","PEN","RBC","SHK","SOP","WAT"], count = 1, proxy = Nothing},
         Task {name = "PA WMRam/BRpm", days = [Monday,Thursday], pool = ["KDM","RRB"], count = 1, proxy = Nothing},
         Task {name = "PA WMRam/CLYpm", days = [Tuesday], pool = ["KDM","RRB"], count = 1, proxy = Nothing},
         Task {name = "PA WMR", days = [Thursday,Wednesday,Monday,Tuesday,Friday], pool = ["KDM","RRB"], count = 1, proxy = Nothing},
         Task {name = "PA BRam/CLYpm", days = [Tuesday], pool = ["KDM","RRB"], count = 1, proxy = Nothing},
         Task {name = "PA CDH", days = [Wednesday,Friday], pool = ["KDM","RRB"], count = 1, proxy = Nothing},
         Task {name = "PA BRO pm", days = [Monday], pool = ["KDM"], count = 1, proxy = Nothing},
         Task {name = "PA BRO", days = [Thursday,Monday], pool = ["KDM","RRB"], count = 1, proxy = Nothing},
         Task {name = "PA Vasc Call", days = [Saturday,Sunday], pool = ["KDM"], count = 1, proxy = Nothing},
         Task {name = "NoC", days = [Saturday,Sunday], pool = ["ADM","BRD","BWN","DGD","DOS","HAR","JLB","KEE","RED"], count = 1, proxy = Nothing},
         Task {name = "FLEX", days = [Thursday,Wednesday,Monday,Tuesday,Friday], pool = ["ADM","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","EDW","HAR","HIN","HOL","JBM","JGA","JKT","JLB","KDP","KEE","KHA","KLA","LKB","LLA","LOT","MCP","MOR","PEN","RED","SHA","SHK","SM","SOP","SSL","TAN","TJR","WAT"], count = 1, proxy = Nothing},
         Task {name = "Peds Overnight Call", days = [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday], pool = ["JLB","LKB","LLA","MCP"], count = 1, proxy = Nothing},
         Task {name = "NeuroSurg Call", days = [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday], pool = ["KLA"], count = 1, proxy = Nothing},
         Task {name = "Neuro Call", days = [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday], pool = ["ALT","BWT","HOL","JGA","KHA","KLA","NAZ","RED","TAN"], count = 1, proxy = Nothing},
         Task {name = "MSK Call", days = [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday], pool = ["BRD","BWN","CAR","HIN","JBM","PEN"], count = 1, proxy = Nothing},
         Task {name = "Body Call", days = [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday], pool = ["BOR","EDW","JGA","KDP","LOT","MOR","TJR","WAT"], count = 1, proxy = Nothing},
         Task {name = "Vasc Call", days = [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday], pool = ["ADM","CML","DAL","DOS","HAR","KEE","SOP"], count = 1, proxy = Nothing},
         Task {name = "REX Breast Conf", days = [Tuesday], pool = ["CRO","JKT","LOT","SHK","SSL"], count = 1, proxy = Nothing},
         Task {name = "Peds Conf", days = [Thursday,Wednesday], pool = ["JLB","LKB","LLA","MCP"], count = 1, proxy = Nothing},
         Task {name = "Ortho MSK Conf", days = [Friday], pool = ["BRD","BWN","CAR","JBM","PEN","SHA"], count = 1, proxy = Nothing},
         Task {name = "Hand & Wrist Conf", days = [Monday], pool = ["BWN","CAR","PEN","SHA"], count = 1, proxy = Nothing},
         Task {name = "Cary Thoracic Conf", days = [Tuesday], pool = ["BOR","EDW","KDP","MOR","TJR","WAT"], count = 1, proxy = Nothing},
         Task {name = "WMC Breast Conf", days = [Wednesday], pool = ["CRO","JKT","LOT","SHK","SSL"], count = 1, proxy = Nothing},
         Task {name = "Lung nodule conf", days = [Friday], pool = ["BOR","EDW","JGA","KDP","MOR","TJR","WAT"], count = 1, proxy = Nothing},
         Task {name = "Vas Wknd", days = [Saturday,Sunday], pool = ["ADM","CML","DAL","DOS","HAR","KEE","SOP"], count = 1, proxy = Nothing},
         Task {name = "Wknd Gen2", days = [Saturday,Sunday], pool = ["ALT","BOR","BRD","BWT","CML","CRO","DAL","DGD","HAR","HIN","JGA","JKT","KDP","KHA","PEN","SHK","TAN","WAT"], count = 1, proxy = Nothing},
         Task {name = "Wknd Gen1", days = [Saturday,Sunday], pool = ["ADM","BRD","BWN","BWT","CAR","CML","CRO","DGD","DOS","HAR","JKT","JLB","KDP","KEE","LLA","PEN","RED","SHK","SM","SOP","TAN"], count = 1, proxy = Nothing},
         Task {name = "Peds Wknd", days = [Saturday,Sunday], pool = ["JLB","LKB","LLA","MCP"], count = 1, proxy = Nothing},
         Task {name = "Neuro Wknd", days = [Saturday,Sunday], pool = ["BWT","HOL","JGA","KHA","KLA","RED","TAN"], count = 1, proxy = Nothing},
         Task {name = "MSK Wknd", days = [Saturday,Sunday], pool = ["BRD","BWN","CAR","HIN","JBM","PEN","SHA"], count = 1, proxy = Nothing},
         Task {name = "Body Wknd", days = [Saturday, Sunday], pool = ["BOR","EDW","JGA","KDP","LOT","MOR","TJR","WAT"], count = 1, proxy = Nothing},
         Task {name = "RSNA", days = [Monday,Tuesday,Wednesday], pool = ["BRD","HAR","JLB","SM"], count = 4, proxy = Nothing},
         Task {name = "TRN", days = [Wednesday,Thursday,Monday,Tuesday,Friday], pool = ["ADM","KDM","KEE","PEN","RRB"], count = 1, proxy = Nothing},
         Task {name = "HOff", days = [Monday,Thursday,Friday], pool = ["ADM","BOR","BWN","BWT","CAR","CLO","CML","CRO","DAL","DGD","DOS","EDW","HIN","HOL","JBM","JGA","JKT","KDM","KDP","KEE","KHA","LKB","LLA","LOT","MCP","MOR","PEN","RED","RRB","SHA","SHK","SM","SOP","SSL","TAN","TJR","WAT"], count = 30, proxy = Nothing},
         Task {name = "PCO", days = [Monday,Wednesday,Thursday], pool = ["ADM","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","HAR","HIN","HOL","JBM","JGA","JKT","JLB","KDP","KHA","LKB","LLA","MCP","MOR","PEN","RED","SHK","SM","SOP","TAN","TJR","WAT"], count = 1, proxy = Nothing},
         Task {name = "LEV", days = [Monday,Wednesday,Friday,Thursday], pool = ["EDW"], count = 1, proxy = Nothing},
         Task {name = "Admin", days = [Wednesday,Thursday,Friday,Tuesday,Monday], pool = ["BWN","HAR","HOL","KDP","LOT","SM","TJR"], count = 4, proxy = Nothing},
         Task {name = "Vac", days = [Wednesday,Thursday,Friday,Tuesday,Monday],
               pool = ["ADM","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","EDW","HAR","HIN","HOL","JBM","JGA","JKT","JLB","KDM","KDP","KEE","KHA","KLA","LKB","LLA","LOT","MCP","MOR","PEN","RED","RRB","SHA","SHK","SM","SOP","SSL","TAN","TJR","WAT"],
               count = 9, proxy = Nothing},
         Task {name = "PCO2", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["BOR","BRD","BWN","HOL","JKT","JLB","KDP","KHA","KLA","LLA","MOR","TAN"],
               count = 1, proxy = Nothing},
         Task {name = "BKU", days = [Thursday,Monday,Tuesday,Wednesday,Friday],
               pool = ["ADM","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","HAR","HIN","HOL","JBM","JGA","JKT","JLB","KDP","KEE","KHA","KLA","LKB","LLA","LOT","MCP","MOR","PEN","RED","SHK","SM","SOP","TAN","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "BDO", days = [Wednesday,Friday,Thursday,Tuesday,Monday],
               pool = ["LOT"],
               count = 1, proxy = Nothing},
         Task {name = "DOff", days = [Friday,Tuesday,Monday,Thursday,Wednesday],
               pool = ["ADM","ALT","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","EDW","HAR","HIN","HOL","JBM","JGA","JKT","JLB","KDP","KEE","KHA","KLA","LKB","LLA","LOT","MCP","MOR","NAZ","PEN","RBC","RED","SHA","SHK","SM","SOP","SSL","TAN","TJR","WAT"],
               count = 10, proxy = Nothing},
         Task {name = "WM Cardiac MR", days = [Wednesday,Thursday,Friday,Monday,Tuesday],
               pool = ["EDW","JLB","LLA","TAN","TJR"],
               count = 1, proxy = Nothing},
         Task {name = "WMR Late", days = [Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday],
               pool = ["ALT","NAZ","RBC"],
               count = 1, proxy = Nothing},
         Task {name = "WMR Eve2", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["ADM","ALT","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","HAR","HIN","HOL","JBM","JGA","JKT","JLB","KDP","KHA","LKB","LLA","MCP","MOR","NAZ","PEN","RBC","RED","SHK","SOP","TAN","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "WMR Eve1", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["ADM","ALT","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","HAR","HIN","HOL","JBM","JGA","JKT","JLB","KDP","KEE","KHA","KLA","LKB","LLA","LOT","MCP","MOR","PEN","RBC","RED","SHK","SM","SOP","TAN","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "HAW", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["BOR","BWN","HAR","HOL","JKT","TAN"],
               count = 1, proxy = Nothing},
         Task {name = "VIR-WMC", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["ADM","CML","DAL","DOS","HAR","KEE","SM","SOP"],
               count = 1, proxy = Nothing},
         Task {name = "VIR-VEIN", days = [Wednesday,Thursday,Monday,Tuesday,Friday],
               pool = ["ADM","CML","DAL","DOS","HAR","KEE","SM","SOP"],
               count = 1, proxy = Nothing},
         Task {name = "VIR2-WMR", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["ADM","BWN","CML","DAL","DOS","HAR","KEE","KLA","SM","SOP"],
               count = 1, proxy = Nothing},
         Task {name = "VIR1-WMR", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["ADM","CML","DAL","DOS","HAR","KEE","SM","SOP"],
               count = 1, proxy = Nothing},
         Task {name = "PEDS-WMR", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["JLB","LKB","LLA","MCP"],
               count = 1, proxy = Nothing},
         Task {name = "PEDS-RRC/WMList", days = [Tuesday,Wednesday,Thursday,Friday,Monday],
               pool = ["JLB","LKB","LLA","MCP"],
               count = 1, proxy = Nothing},
         Task {name = "NEURO-WMR", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["ALT","BWT","HOL","JGA","KHA","KLA","NAZ","RED","TAN"],
               count = 1, proxy = Nothing},
         Task {name = "NEURO-FV", days = [Monday,Wednesday,Thursday],
               pool = ["ALT","BWT","HOL","JGA","KHA","KLA","NAZ","RED","TAN"],
               count = 1, proxy = Nothing},
         Task {name = "NEURO-CLAY", days = [Tuesday,Friday],
               pool = ["ALT","BWT","HOL","JGA","KHA","KLA","NAZ","RED","TAN"],
               count = 1, proxy = Nothing},
         Task {name = "NEURO-BRO-EVE", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["ALT","BWT","HOL","JGA","KHA","KLA","NAZ","RED","TAN"],
               count = 1, proxy = Nothing},
         Task {name = "NEURO-KNI", days = [Monday],
               pool = ["ALT","BWT","HOL","JGA","KHA","KLA","NAZ","RED","TAN"],
               count = 1, proxy = Nothing},
         Task {name = "MSK-WMN", days = [Tuesday,Thursday],
               pool = ["BRD","BWN","CAR","HIN","JBM","PEN","SHA"],
               count = 1, proxy = Nothing},
         Task {name = "MSK-MRI-CLA", days = [Monday],
               pool = ["BRD","BWN","CAR","HIN","JBM","PEN","SHA"],
               count = 1, proxy = Nothing},
         Task {name = "MSK-RRC", days = [Tuesday,Monday,Wednesday,Thursday,Friday],
               pool = ["BRD","BWN","CAR","HIN","JBM","PEN","SHA"],
               count = 1, proxy = Nothing},
         Task {name = "MSK-RMP", days = [Monday,Wednesday,Friday],
               pool = ["BRD","BWN","CAR","HIN","JBM","PEN","SHA"],
               count = 1, proxy = Nothing},
         Task {name = "MSK-KNI", days = [Tuesday,Thursday],
               pool = ["BRD","BWN","CAR","HIN","JBM","PEN","SHA"],
               count = 1, proxy = Just "MAMMLT/GEN-KNI"},
         Task {name = "MSK-BRI", days = [Monday,Wednesday,Friday],
               pool = ["BRD","BWN","CAR","HIN","JBM","PEN","SHA"],
               count = 1, proxy = Nothing},
         Task {name = "MAMMLT/GEN-WMN", days = [], pool = [],
               count = 0, proxy = Nothing},
         Task {name = "MAMMLT/GEN-WF", days = [Tuesday],
               pool = ["BOR","BRD","BWN","BWT","CAR","CRO","DGD","EDW","HOL","HIN","JBM","JGA","JKT","KDP","KHA","LLA","LOT","PEN","RED","SHA","SHK","TAN","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "MAMMLT/GEN-RMP", days = [Tuesday,Thursday],
               pool = ["BOR","BRD","BWN","BWT","CAR","CRO","DGD","EDW","HOL","HIN","JBM","JGA","JKT","KDP","KHA","LLA","LOT","PEN","RED","SHA","SHK","TAN","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "MAMMLT/GEN-KNI", days = [Friday,Wednesday,Thursday,Tuesday],
               pool = ["BOR","BRD","BWN","BWT","CAR","CRO","DGD","EDW","HOL","HIN","JBM","JGA","JKT","KDP","KHA","LLA","LOT","PEN","RED","SHA","SHK","TAN","TJR","WAT"],
               count = 1, proxy = Just "MSK-KNI"},
         Task {name = "MAMMLT/GEN-CED", days = [Monday,Wednesday,Thursday],
               pool = ["BOR","BRD","BWN","BWT","CAR","CRO","DGD","EDW","HOL","HIN","JBM","JGA","JKT","KDP","KHA","LLA","LOT","PEN","RED","SHA","SHK","TAN","TJR","WAT"],
               count = 1, proxy = Just "BODY-CED"},
         Task {name = "MAMMLT/GEN-BRO", days = [Monday,Wednesday,Thursday,Friday],
               pool = ["BOR","CRO","DGD","EDW","JGA","JKT","KDP","LOT","SHK","SSL","TJR"],
               count = 1, proxy = Nothing},
         Task {name = "GEN-WMApex", days = [Wednesday,Monday,Thursday],
               pool = ["ADM","BOR","BRD","CAR","DAL","DGD","DOS","EDW","HOL","JBM","JGA","JKT","JLB","KDP","KEE","KHA","KLA","LKB","LLA","MCP","MOR","PEN","RED","SHA","SHK","SM","TAN","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "GEN-WMC", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["ADM","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","EDW","HAR","HIN",
                       "HOL","JBM","JGA","JKT","JLB","KEE","KHA","KLA","LKB","LLA","LOT","MCP","MOR","PEN",
                       "RED","SHA","SHK","SM","SOP","TAN","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "GEN-FLUORO-WMR", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["ADM","BOR","BRD","BWN","BWT","CAR","CML","CRO","DAL","DGD","DOS","EDW","HIN",
                       "HOL","JBM","JGA","JKT","JLB","KDP","KEE","KHA","KLA","LKB","LLA","MCP","MOR","PEN","SHA","SHK","SM","TAN","TJR", "WAT"],
               count = 1, proxy = Nothing},
         Task {name = "BREAST-WMN", days = [Friday,Monday,Wednesday],
               pool = ["CRO","JKT","LOT","SHK","SSL"],
               count = 1, proxy = Nothing},
         Task {name = "BREAST-WMC/RRC", days = [Monday,Thursday],
               pool = ["CRO","JKT","LOT","SHK","SSL"],
               count = 1, proxy = Nothing},
         Task {name = "BREAST-WMC/BRO", days = [Wednesday],
               pool = ["CRO","JKT","LOT","SHK","SSL"],
               count = 1, proxy = Nothing},
         Task {name = "BREAST-BRO/RRC", days = [Friday,Tuesday],
               pool = ["CRO","JKT","LOT","SHK","SSL"],
               count = 1, proxy = Nothing},
         Task {name = "BREAST-RRC", days = [],
               pool = ["CRO","JKT","LOT","SHK","SSL"],
               count = 0, proxy = Nothing},
         Task {name = "BREAST-BRO", days = [Tuesday],
               pool = ["CRO","JKT","LOT","SHK","SSL"],
               count = 1, proxy = Nothing},
         Task {name = "BODY-WMR", days = [Monday,Tuesday,Wednesday,Thursday,Friday],
               pool = ["BOR","EDW","JGA","KDP","MOR","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "BODY-WFO", days = [Monday,Thursday],
               pool = ["BOR","EDW","JGA","KDP","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "BODY-KNI", days = [],
               pool = ["BOR","EDW","JGA","KDP","TJR","WAT"],
               count = 1, proxy = Nothing},
         Task {name = "BODY-CED", days = [Tuesday,Friday],
               pool = ["BOR","EDW","JGA","KDP","TJR","WAT"],
               count = 1, proxy = Just "MAMMLT/GEN-CED"}]
